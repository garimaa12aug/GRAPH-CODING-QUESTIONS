//with color array
bool dfs_visit(int i, int V, vector<int> adj[], int color[])
{
    if(color[i] ==1)
    return 1;
    color[i]=1;
    for(int j=0;j<adj[i].size();j++)
    {
        if(color[adj[i][j]] == 1)
        return 1;
        if(color[adj[i][j]] ==0 && dfs_visit(adj[i][j],V,adj,color) )
        return 1;
        
    }
    color[i]=2;
    return 0;
}

bool isCyclic(int V, vector<int>adj[])
{
   int color[V]={0};
   for(int i =0;i<V;i++)
    {  
        if(color[i] ==0)
    {
      if(dfs_visit(i,V,adj,color))
      return 1;
    }
    }
    return 0;
    
    // Your code here
}

**************************************************************************************************************************************

// with two supporting vectors
bool dfs_visit(int i, int V, vector<int> adj[],bool visited[], bool color[])
{
  
    visited[i]=1;
    color[i]=1;
    for(int j =0;j<adj[i].size();j++)
    { 
        if(color[adj[i][j]] == 1)
        return 1;
        
        if(!visited[adj[i][j]] &&  dfs_visit(adj[i][j],V,adj,visited,color))
        return 1;
        
       
    }
    
  color[i]=0;
    return 0;
}
bool isCyclic(int V, vector<int> adj[])
{
    bool visited[V]={0};
    bool color[V]={0};
   
    for(int i =0;i<V;i++)
    {  
        if(!visited[i])
    {
      if(dfs_visit(i,V,adj,visited,color))
      return 1;
    }
    }
    return 0;
}
